{"ast":null,"code":"export default {\n  name: \"App\",\n  data() {\n    return {\n      formValues: {\n        name: \"\",\n        age: \"\",\n        isAvailable: \"no\",\n        skills: []\n      },\n      firstname: \"brue\",\n      lastname: \"wayne\",\n      volume: 0,\n      basemultiplier: 23,\n      countvalue: 0,\n      name: \"Naruto\",\n      village: \"Leaf\",\n      mentor: \"<b>Jiraya</b>\",\n      height: \"5.3\",\n      isButtonDisabled: false,\n      isSuccess: \"unsuccess\",\n      isTrue: true,\n      isNew: true,\n      highlightColor: \"orange\",\n      fontSizehighlight: \"20px\",\n      succcessStyled: {\n        color: \"green\",\n        border: \"1px solid green\",\n        padding: \"10px\"\n      },\n      number: -2,\n      vShowDir: true,\n      arrNumdata: [\"batman\", \"superman\", \"flash\"],\n      superheroDataArr: [{\n        name: \"batman\",\n        alias: \"bruce\"\n      }, {\n        name: \"superman\",\n        alias: \"clark\"\n      }, {\n        name: \"flash\",\n        alias: \"barry\"\n      }]\n    };\n  },\n  methods: {\n    multiplier(number) {\n      return number * this.basemultiplier;\n    },\n    increment() {\n      return this.countvalue += 1;\n    },\n    decrement() {\n      return this.countvalue -= 1;\n    },\n    handleForm(e) {\n      e.preventDefault();\n      console.log(\"the form values are\", this.formValues);\n    }\n  },\n  // the computed property can be used to write the piece of logic in one place and then we use the property\n  // when needed in the template\n  computed: {\n    // fullnamefun() {},\n    fullnamecomputed() {\n      return `${this.firstname}, ${this.lastname}`;\n    }\n\n    // watchers , the watchers are used to watch the data of the value of the var closely to execute the funciton for\n    // the certain condition\n  }\n};","map":{"version":3,"names":["name","data","formValues","age","isAvailable","skills","firstname","lastname","volume","basemultiplier","countvalue","village","mentor","height","isButtonDisabled","isSuccess","isTrue","isNew","highlightColor","fontSizehighlight","succcessStyled","color","border","padding","number","vShowDir","arrNumdata","superheroDataArr","alias","methods","multiplier","increment","decrement","handleForm","e","preventDefault","console","log","computed","fullnamecomputed"],"sources":["/home/zaheerabbas/Desktop/Projects/VueJs/hello-world/src/App.vue"],"sourcesContent":["<template>\n  <h5>Hello {{ name }}</h5>\n\n  <!-- v-text directive -->\n  <p v-text=\"village\"></p>\n\n  <!-- v-html directive -->\n  <p v-html=\"mentor\"></p>\n\n  <!-- using the atrributes like id,class etc.. -->\n  <p v-bind:id=\"height\">{{ height }}</p>\n  <!-- other binding example using the boolean  -->\n\n  <button v-bind:disabled=\"isButtonDisabled\">Click Me!</button>\n\n  <!-- using the class (static)-->\n  <p class=\"underlined\">underlined text</p>\n\n  <!-- we can also add the dynamic styles by using the  -->\n  <p v-bind:class=\"isSuccess\">{{ isSuccess }}</p>\n  <!-- to dynamically bind the data using the ternary operator in the v-bind directive -->\n  <p :class=\"isTrue ? 'success' : 'unsuccess'\">is its {{ isTrue }}</p>\n\n  <!-- we can also use the array and the object approach to bind the multiple classes to the tag  -->\n  <p :class=\"['new', 'success']\">\n    New Data with the multiple array of styles (classes in the array)\n  </p>\n\n  <!-- we can also conditional render the aray of the classes  -->\n\n  <p :class=\"[isTrue ? 'success' : 'unsuccess', isNew && 'new']\">\n    Conditional rendering of the v bind classes within the array\n  </p>\n\n  <!-- we can also bind the conditional data using the object  -->\n  <p\n    v-bind:class=\"{\n      new: isNew,\n      isSuccess: 'success',\n    }\"\n  >\n    Binding the data using the object in the bind class\n  </p>\n\n  <!-- we can also add the inline styles first we need to declare the color in the js and then use \n  the color in the bind:style directive -->\n\n  <p\n    v-bind:style=\"{\n      color: highlightColor,\n    }\"\n  >\n    Highlighted Text\n  </p>\n\n  <!-- we can also bind the style objects to the directive as shwon , first you need to create an obejct\n  with the styles in the js and then you need to use it in the template as shown in the example -->\n  <p v-bind:style=\"succcessStyled\">\n    Success styled with the object in the inline\n  </p>\n\n  <!-- instead of using the v-bind everywhere we can also use the :attribute same as the v-bind:attribute -->\n\n  <!-- //! conditional rendering  -->\n  <!-- v-if -->\n  <p class=\"notGreaterThanZero\" v-if=\"number === 0\">\n    Not greater than {{ number }}\n  </p>\n\n  <p class=\"greaterThanZero\" v-else-if=\"number > 0\">\n    Number is a positive number\n  </p>\n\n  <p class=\"notGreaterThanZero\" v-else>\n    Not a number/negative number {{ number }}\n  </p>\n\n  <!-- we can show or hide the ele uisng the v-show directive -->\n  <!-- if the condition for the vhsow is false then the content wont show beacuse the display is none for this -->\n  <p v-show=\"vShowDir\">v-show directive</p>\n\n  <!-- listing the data from the array using the v-for directive -->\n  <p v-for=\"(superhero, index) in arrNumdata\" :key=\"index\">\n    {{ index }}{{ superhero }}\n  </p>\n\n  <h4>superhero data</h4>\n  <p v-for=\"hero in superheroDataArr\" :key=\"hero\">\n    {{ hero?.name }} alias is {{ hero?.alias }}\n  </p>\n\n  <!-- conditional rendering using the vfor and vif  -->\n  <!-- only the show the data in the array which contains the batman -->\n  <template v-for=\"supe in superheroDataArr\" :key=\"supe\">\n    <p\n      v-bind:style=\"{\n        color: highlightColor,\n        fontSize: fontSizehighlight,\n      }\"\n      v-if=\"supe.name === 'batman'\"\n    >\n      {{ supe?.name }}\n    </p>\n  </template>\n\n  <!-- //!even we need to use the vfor to show the data from the object  -->\n\n  <!-- methods in in vue -->\n\n  <!-- we can create our own methods, we can also declare a variable in the data method and can use in \nour methods as well  -->\n\n  <p>the multiplier for provided is {{ multiplier(2) }}</p>\n\n  <!-- on click event in the vue to change the name -->\n  <button v-on:click=\"name = 'Batman'\">Change name to {{ name }}</button>\n\n  <!-- the counter example in vue -->\n\n  <h2>Counter in Vue.js</h2>\n  <h3>{{ countvalue }}</h3>\n  <button v-on:click=\"increment()\">INC</button>\n  <!-- //! to bind the events in the vue instead of using the v-on every time we can also use the @click -->\n  <button @click=\"decrement()\">DEC</button>\n\n  <!-- to use the form in the vue js -->\n  <div>\n    <form @submit=\"handleForm\">\n      <label for=\"\">Name</label>\n      <input\n        type=\"text\"\n        placeholder=\"enter the name\"\n        v-model=\"formValues.name\"\n      />\n      <label for=\"\">Age</label>\n      <input type=\"text\" placeholder=\"enter the age\" v-model=\"formValues.age\" />\n\n      <label for=\"\">will to work from remote location?</label>\n      <!-- we also set the values to yes or no for the checkbox values -->\n      <input\n        type=\"checkbox\"\n        name=\"\"\n        id=\"\"\n        v-model=\"formValues.isAvailable\"\n        true-value=\"yes\"\n        false-value=\"no\"\n      />\n\n      <p>select skills</p>\n      <label for=\"\">HTML</label>\n      <input\n        type=\"checkbox\"\n        name=\"\"\n        id=\"html\"\n        value=\"html\"\n        v-model=\"formValues.skills\"\n      />\n      <label for=\"\">CSS</label>\n      <input\n        type=\"checkbox\"\n        name=\"\"\n        id=\"css\"\n        value=\"css\"\n        v-model=\"formValues.skills\"\n      />\n      <label for=\"\">Vue</label>\n      <input type=\"checkbox\" value=\"vue\" id=\"vue\" v-model=\"formValues.skills\" />\n      <button type=\"submit\">Submit Form</button>\n    </form>\n  </div>\n\n  <!-- the example for the computed -->\n  <p>with out computed</p>\n  <p>full name is {{ firstname }}, {{ lastname }}</p>\n\n  <p>with computed</p>\n  <p>full name is {{ fullnamecomputed }}</p>\n</template>\n\n<script>\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      formValues: {\n        name: \"\",\n        age: \"\",\n        isAvailable: \"no\",\n        skills: [],\n      },\n      firstname: \"brue\",\n      lastname: \"wayne\",\n      volume: 0,\n      basemultiplier: 23,\n      countvalue: 0,\n      name: \"Naruto\",\n      village: \"Leaf\",\n      mentor: \"<b>Jiraya</b>\",\n      height: \"5.3\",\n      isButtonDisabled: false,\n      isSuccess: \"unsuccess\",\n      isTrue: true,\n      isNew: true,\n      highlightColor: \"orange\",\n      fontSizehighlight: \"20px\",\n      succcessStyled: {\n        color: \"green\",\n        border: \"1px solid green\",\n        padding: \"10px\",\n      },\n      number: -2,\n      vShowDir: true,\n      arrNumdata: [\"batman\", \"superman\", \"flash\"],\n      superheroDataArr: [\n        { name: \"batman\", alias: \"bruce\" },\n        { name: \"superman\", alias: \"clark\" },\n        { name: \"flash\", alias: \"barry\" },\n      ],\n    };\n  },\n\n  methods: {\n    multiplier(number) {\n      return number * this.basemultiplier;\n    },\n    increment() {\n      return (this.countvalue += 1);\n    },\n    decrement() {\n      return (this.countvalue -= 1);\n    },\n\n    handleForm(e) {\n      e.preventDefault();\n      console.log(\"the form values are\", this.formValues);\n    },\n  },\n\n  // the computed property can be used to write the piece of logic in one place and then we use the property\n  // when needed in the template\n  computed: {\n    // fullnamefun() {},\n    fullnamecomputed() {\n      return `${this.firstname}, ${this.lastname}`;\n    },\n\n    // watchers , the watchers are used to watch the data of the value of the var closely to execute the funciton for\n    // the certain condition\n  },\n};\n</script>\n\n<style>\n.underlined {\n  text-decoration: underline;\n}\n\n.success {\n  color: green;\n}\n.unsuccess {\n  color: red;\n}\n\n.new {\n  font-style: italic;\n  font-weight: 800;\n}\n\n.greaterThanZero {\n  color: green;\n}\n\n.notGreaterThanZero {\n  color: red;\n}\n</style>\n"],"mappings":"AAoLA,eAAe;EACbA,IAAI,EAAE,KAAK;EACXC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE;QACVF,IAAI,EAAE,EAAE;QACRG,GAAG,EAAE,EAAE;QACPC,WAAW,EAAE,IAAI;QACjBC,MAAM,EAAE;MACV,CAAC;MACDC,SAAS,EAAE,MAAM;MACjBC,QAAQ,EAAE,OAAO;MACjBC,MAAM,EAAE,CAAC;MACTC,cAAc,EAAE,EAAE;MAClBC,UAAU,EAAE,CAAC;MACbV,IAAI,EAAE,QAAQ;MACdW,OAAO,EAAE,MAAM;MACfC,MAAM,EAAE,eAAe;MACvBC,MAAM,EAAE,KAAK;MACbC,gBAAgB,EAAE,KAAK;MACvBC,SAAS,EAAE,WAAW;MACtBC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,IAAI;MACXC,cAAc,EAAE,QAAQ;MACxBC,iBAAiB,EAAE,MAAM;MACzBC,cAAc,EAAE;QACdC,KAAK,EAAE,OAAO;QACdC,MAAM,EAAE,iBAAiB;QACzBC,OAAO,EAAE;MACX,CAAC;MACDC,MAAM,EAAE,CAAC,CAAC;MACVC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC;MAC3CC,gBAAgB,EAAE,CAChB;QAAE3B,IAAI,EAAE,QAAQ;QAAE4B,KAAK,EAAE;MAAQ,CAAC,EAClC;QAAE5B,IAAI,EAAE,UAAU;QAAE4B,KAAK,EAAE;MAAQ,CAAC,EACpC;QAAE5B,IAAI,EAAE,OAAO;QAAE4B,KAAK,EAAE;MAAQ,CAAC;IAErC,CAAC;EACH,CAAC;EAEDC,OAAO,EAAE;IACPC,UAAUA,CAACN,MAAM,EAAE;MACjB,OAAOA,MAAK,GAAI,IAAI,CAACf,cAAc;IACrC,CAAC;IACDsB,SAASA,CAAA,EAAG;MACV,OAAQ,IAAI,CAACrB,UAAS,IAAK,CAAC;IAC9B,CAAC;IACDsB,SAASA,CAAA,EAAG;MACV,OAAQ,IAAI,CAACtB,UAAS,IAAK,CAAC;IAC9B,CAAC;IAEDuB,UAAUA,CAACC,CAAC,EAAE;MACZA,CAAC,CAACC,cAAc,CAAC,CAAC;MAClBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACnC,UAAU,CAAC;IACrD;EACF,CAAC;EAED;EACA;EACAoC,QAAQ,EAAE;IACR;IACAC,gBAAgBA,CAAA,EAAG;MACjB,OAAQ,GAAE,IAAI,CAACjC,SAAU,KAAI,IAAI,CAACC,QAAS,EAAC;IAC9C;;IAEA;IACA;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}